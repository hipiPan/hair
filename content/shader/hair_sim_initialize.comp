#version 450
#extension GL_GOOGLE_include_directive : enable

layout(std430, binding = 0) restrict readonly buffer PositionDataBufferBlock
{
    vec3 data[];
} position_data_buffer;

layout(std430, binding = 1) restrict writeonly buffer PositionPreDataBufferBlock
{
    vec3 data[];
} position_pre_data_buffer;

layout(std430, binding = 2) restrict writeonly buffer PositionPrePreDataBufferBlock
{
    vec3 data[];
} position_pre_pre_data_buffer;

layout(std430, binding = 3) restrict writeonly buffer VelocityDataBufferBlock
{
    vec4 data[];
} velocity_data_buffer;

layout(std430, binding = 4) restrict writeonly buffer VelocityPreDataBufferBlock
{
    vec4 data[];
} velocity_pre_data_buffer;

layout(push_constant) uniform ConstantBlock
{
    uint strand_count;
    uint strand_particle_count;
    uint strand_particle_stride;
    float particle_diameter;
} constant;

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;
void main()
{
    if (gl_GlobalInvocationID.x >= constant.strand_count)
        return;

    uint strand_index = gl_GlobalInvocationID.x;
    uint strand_particle_begin = strand_index * constant.strand_particle_count;
    uint strand_particle_end = strand_particle_begin + constant.strand_particle_count;
    for (uint i = strand_particle_begin; i != strand_particle_end; i += constant.strand_particle_stride)
    {
        vec3 orig_position = position_data_buffer.data[i];
        position_pre_data_buffer.data[i] = orig_position;
        position_pre_pre_data_buffer.data[i] = orig_position;
        velocity_data_buffer.data[i] = vec4(0.0, 0.0, 0.0, 0.2); // xyz: velocity, w: splatting weight
        velocity_pre_data_buffer.data[i] = vec4(0.0, 0.0, 0.0, 0.2); // xyz: velocity, w: splatting weight
    }
}